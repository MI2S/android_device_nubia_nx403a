diff --git a/src/java/com/android/internal/telephony/cdma/CDMAPhone.java b/src/java/com/android/internal/telephony/cdma/CDMAPhone.java
index ccffeae..26db031 100644
--- a/src/java/com/android/internal/telephony/cdma/CDMAPhone.java
+++ b/src/java/com/android/internal/telephony/cdma/CDMAPhone.java
@@ -136,7 +136,8 @@ public class CDMAPhone extends PhoneBase {
 
     Registrant mPostDialHandler;
 
-    static String PROPERTY_CDMA_HOME_OPERATOR_NUMERIC = "ro.cdma.home.operator.numeric";
+    public static final String PROPERTY_CDMA_HOME_OPERATOR_NUMERIC =
+            "ro.cdma.home.operator.numeric";
 
     // Constructors
     public CDMAPhone(Context context, CommandsInterface ci, PhoneNotifier notifier) {
@@ -1668,3 +1669,4 @@ public class CDMAPhone extends PhoneBase {
         pw.println(" isCspPlmnEnabled()=" + isCspPlmnEnabled());
     }
 }
+
diff --git a/src/java/com/android/internal/telephony/Phone.java b/src/java/com/android/internal/telephony/Phone.java
index c42beda..224e9ce 100644
--- a/src/java/com/android/internal/telephony/Phone.java
+++ b/src/java/com/android/internal/telephony/Phone.java
@@ -103,6 +103,7 @@ public interface Phone {
     static final String REASON_DATA_DEPENDENCY_UNMET = "dependencyUnmet";
     static final String REASON_LOST_DATA_CONNECTION = "lostDataConnection";
     static final String REASON_CONNECTED = "connected";
+    static final String REASON_NV_READY = "nvReady";
     static final String REASON_SINGLE_PDN_ARBITRATION = "SinglePdnArbitration";
 
     // Used for band mode selection methods
@@ -144,7 +158,7 @@ public interface Phone {
     static final int CDMA_SUBSCRIPTION_RUIM_SIM = 0; // RUIM/SIM (default)
     static final int CDMA_SUBSCRIPTION_NV       = 1; // NV -> non-volatile memory
 
-    static final int PREFERRED_CDMA_SUBSCRIPTION = CDMA_SUBSCRIPTION_NV;
+    static final int PREFERRED_CDMA_SUBSCRIPTION = CDMA_SUBSCRIPTION_RUIM_SIM;
 
     static final int TTY_MODE_OFF = 0;
     static final int TTY_MODE_FULL = 1;
+
diff --git a/src/java/com/android/internal/telephony/cdma/CdmaLteServiceStateTracker.java b/src/java/com/android/internal/telephony/cdma/CdmaLteServiceStateTracker.java
index 7e1db0d..a66111c 100644
--- a/src/java/com/android/internal/telephony/cdma/CdmaLteServiceStateTracker.java
+++ b/src/java/com/android/internal/telephony/cdma/CdmaLteServiceStateTracker.java
@@ -456,10 +456,11 @@ public class CdmaLteServiceStateTracker extends CdmaServiceStateTracker {
             mPhone.notifyServiceStateChanged(mSS);
         }
 
-        if (hasCdmaDataConnectionAttached || has4gHandoff) {
-            mAttachedRegistrants.notifyRegistrants();
-        }
-
+        // First notify detached, then rat changed, then attached - that's the way it
+        // happens in the modem.
+        // Behavior of recipients (DcTracker, for instance) depends on this sequence
+        // since DcTracker reloads profiles on "rat_changed" notification and sets up
+        // data call on "attached" notification.
         if (hasCdmaDataConnectionDetached) {
             mDetachedRegistrants.notifyRegistrants();
         }
@@ -469,6 +470,10 @@ public class CdmaLteServiceStateTracker extends CdmaServiceStateTracker {
             mPhone.notifyDataConnection(null);
         }
 
+        if (hasCdmaDataConnectionAttached || has4gHandoff) {
+            mAttachedRegistrants.notifyRegistrants();
+        }
+
         if (hasRoamingOn) {
             mRoamingOnRegistrants.notifyRegistrants();
         }
diff --git a/src/java/com/android/internal/telephony/cdma/CdmaServiceStateTracker.java b/src/java/com/android/internal/telephony/cdma/CdmaServiceStateTracker.java
index 4bacac8..71d438b 100644
--- a/src/java/com/android/internal/telephony/cdma/CdmaServiceStateTracker.java
+++ b/src/java/com/android/internal/telephony/cdma/CdmaServiceStateTracker.java
@@ -1107,10 +1107,11 @@ public class CdmaServiceStateTracker extends ServiceStateTracker {
             mPhone.notifyServiceStateChanged(mSS);
         }
 
-        if (hasCdmaDataConnectionAttached) {
-            mAttachedRegistrants.notifyRegistrants();
-        }
-
+        // First notify detached, then rat changed, then attached - that's the way it
+        // happens in the modem.
+        // Behavior of recipients (DcTracker, for instance) depends on this sequence
+        // since DcTracker reloads profiles on "rat_changed" notification and sets up
+        // data call on "attached" notification.
         if (hasCdmaDataConnectionDetached) {
             mDetachedRegistrants.notifyRegistrants();
         }
@@ -1120,6 +1121,10 @@ public class CdmaServiceStateTracker extends ServiceStateTracker {
             mPhone.notifyDataConnection(null);
         }
 
+        if (hasCdmaDataConnectionAttached) {
+            mAttachedRegistrants.notifyRegistrants();
+        }
+
         if (hasRoamingOn) {
             mRoamingOnRegistrants.notifyRegistrants();
         }
diff --git a/src/java/com/android/internal/telephony/dataconnection/DcTracker.java b/src/java/com/android/internal/telephony/dataconnection/DcTracker.java
index 8d03fb8..2c6ecd5 100644
--- a/src/java/com/android/internal/telephony/dataconnection/DcTracker.java
+++ b/src/java/com/android/internal/telephony/dataconnection/DcTracker.java
@@ -108,6 +108,18 @@ public final class DcTracker extends DcTrackerBase {
                         Uri.parse("content://telephony/carriers/preferapn_no_update");
     static final String APN_ID = "apn_id";
 
+    /**
+     * Property that can be used to set the IP version for CDMA
+     */
+    private static final String PROPERTY_CDMA_IPPROTOCOL = SystemProperties.get(
+            "persist.telephony.cdma.protocol", "IP");
+
+    /**
+     * Property that can be used to set the IP version for CDMA when roaming
+     */
+    private static final String PROPERTY_CDMA_ROAMING_IPPROTOCOL = SystemProperties.get(
+            "persist.telephony.cdma.rproto", "IP");
+
     private boolean mCanSetPreferApn = false;
 
     private AtomicBoolean mAttached = new AtomicBoolean(false);
@@ -142,13 +154,15 @@ public final class DcTracker extends DcTrackerBase {
                 DctConstants.EVENT_PS_RESTRICT_ENABLED, null);
         p.getServiceStateTracker().registerForPsRestrictedDisabled(this,
                 DctConstants.EVENT_PS_RESTRICT_DISABLED, null);
+        p.getServiceStateTracker().registerForDataRegStateOrRatChanged(this,
+                DctConstants.EVENT_DATA_RAT_CHANGED, null);
 
         if (p.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA) {
             mCdmaSsm = CdmaSubscriptionSourceManager.getInstance(
                     p.getContext(), p.mCi, this,
                     DctConstants.EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED, null);
             // CdmaSsm doesn't send this event whenever you register - fake it ourselves
-           sendMessage(obtainMessage(DctConstants.EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED));
+            sendMessage(obtainMessage(DctConstants.EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED));
         }
 
         mDataConnectionTracker = this;
@@ -181,7 +195,7 @@ public final class DcTracker extends DcTrackerBase {
 
     @Override
     public void dispose() {
-        if (DBG) log("GsmDCT.dispose");
+        if (DBG) log("dispose");
         cleanUpAllConnections(true, null);
 
         super.dispose();
@@ -674,13 +688,10 @@ public final class DcTracker extends DcTrackerBase {
                 ArrayList<ApnSetting> waitingApns = buildWaitingApns(apnContext.getApnType(),
                         radioTech);
                 if (waitingApns.isEmpty()) {
+                    notifyNoData(DcFailCause.MISSING_UNKNOWN_APN, apnContext);
                     notifyOffApnsOfAvailability(apnContext.getReason());
-                    retValue = setupData(apnContext, radioTech);
-                    if(!retValue) {
-                        notifyNoData(DcFailCause.MISSING_UNKNOWN_APN, apnContext);
-                    }
-                    notifyOffApnsOfAvailability(apnContext.getReason());
-                    return retValue;
+                    if (DBG) log("trySetupData: X No APN found retValue=false");
+                    return false;
                 } else {
                     apnContext.setWaitingApns(waitingApns);
                     if (DBG) {
@@ -1042,29 +1053,10 @@ public final class DcTracker extends DcTrackerBase {
         apnSetting = apnContext.getNextWaitingApn();
         if (apnSetting == null) {
             if(PhoneConstants.PHONE_TYPE_CDMA==mPhone.getPhoneType()) {
-                String[] mDunApnTypes = { PhoneConstants.APN_TYPE_DUN };
-                final int mDefaultApnId = DctConstants.APN_DEFAULT_ID;
-                final String[] mDefaultApnTypes = {
-                    PhoneConstants.APN_TYPE_DEFAULT,
-                    PhoneConstants.APN_TYPE_MMS,
-                    PhoneConstants.APN_TYPE_HIPRI };
-                String[] types;
-                int apnId;
-                if (mRequestedApnType.equals(PhoneConstants.APN_TYPE_DUN)) {
-                    types = mDunApnTypes;
-                    apnId = DctConstants.APN_DUN_ID;
-                } else {
-                    types = mDefaultApnTypes;
-                    apnId = mDefaultApnId;
-                }
-                apnSetting = new ApnSetting(apnId, "", "", "", "", "", "", "", "", "",
-                                            "", 0, types, "IP", "IP", true, 0);
-                if (DBG) log("setupData: CDMA detected and apnSetting == null, use stubbed CDMA APN setting= " + apnSetting);
-            } else {
                 if (DBG) log("setupData: return for no apn found!");
                 return false;
             }
-        }
+		}
 
         dcac = checkForCompatibleConnectedApnContext(apnContext);
         if (dcac != null) {
@@ -1130,6 +1122,11 @@ public final class DcTracker extends DcTrackerBase {
      * Handles changes to the APN database.
      */
     private void onApnChanged() {
+        if (DBG) log("onApnChanged: tryRestartDataConnections");
+        tryRestartDataConnections(Phone.REASON_APN_CHANGED);
+    }
+
+    private void tryRestartDataConnections(String reason) {
         DctConstants.State overallState = getOverallState();
         boolean isDisconnected = (overallState == DctConstants.State.IDLE ||
                 overallState == DctConstants.State.FAILED);
@@ -1141,12 +1138,12 @@ public final class DcTracker extends DcTrackerBase {
 
         // TODO: It'd be nice to only do this if the changed entrie(s)
         // match the current operator.
-        if (DBG) log("onApnChanged: createAllApnList and cleanUpAllConnections");
+        if (DBG) log("tryRestartDataConnections: createAllApnList and cleanUpAllConnections");
         createAllApnList();
         setInitialAttachApn();
-        cleanUpAllConnections(!isDisconnected, Phone.REASON_APN_CHANGED);
+        cleanUpAllConnections(!isDisconnected, reason);
         if (isDisconnected) {
-            setupDataOnConnectableApns(Phone.REASON_APN_CHANGED);
+            setupDataOnConnectableApns(reason);
         }
     }
 
@@ -1362,6 +1359,12 @@ public final class DcTracker extends DcTrackerBase {
         setupDataOnConnectableApns(Phone.REASON_SIM_LOADED);
     }
 
+    private void onNvReady() {
+        if (DBG) log("onNvReady");
+        createAllApnList();
+        setupDataOnConnectableApns(Phone.REASON_NV_READY);
+    }
+
     @Override
     protected void onSetDependencyMet(String apnType, boolean met) {
         // don't allow users to tweak hipri to work around default dependency not met
@@ -1874,12 +1877,17 @@ public final class DcTracker extends DcTrackerBase {
 
         // If APN is still enabled, try to bring it back up automatically
         if (mAttached.get() && apnContext.isReady() && retryAfterDisconnected(apnContext)) {
-            SystemProperties.set(PUPPET_MASTER_RADIO_STRESS_TEST, "false");
-            // Wait a bit before trying the next APN, so that
-            // we're not tying up the RIL command channel.
-            // This also helps in any external dependency to turn off the context.
-            if(DBG) log("onDisconnectDone: attached, ready and retry after disconnect");
-            startAlarmForReconnect(getApnDelay(), apnContext);
+            if (apnContext.getReason().equals(Phone.REASON_NW_TYPE_CHANGED)) {
+                // Retry immediately if reason is nw_type_changed (like rat switch, for instance)
+                setupDataOnConnectableApns(Phone.REASON_NW_TYPE_CHANGED);
+            } else {
+                SystemProperties.set(PUPPET_MASTER_RADIO_STRESS_TEST, "false");
+                // Wait a bit before trying the next APN, so that
+                // we're not tying up the RIL command channel.
+                // This also helps in any external dependency to turn off the context.
+                if(DBG) log("onDisconnectDone: attached, ready and retry after disconnect");
+                startAlarmForReconnect(getApnDelay(), apnContext);
+            }
         } else {
             boolean restartRadioAfterProvisioning = mPhone.getContext().getResources().getBoolean(
                     com.android.internal.R.bool.config_restartRadioAfterProvisioning);
@@ -2019,17 +2027,30 @@ public final class DcTracker extends DcTrackerBase {
     }
 
     /**
-     * Based on the sim operator numeric, create a list for all possible
+     * Returns mccmnc for data call either from cdma_home_operator or from IccRecords
+     * @return operator numeric
+     */
+    private String getOperatorNumeric() {
+        String result;
+        if (isNvSubscription()) {
+            result = SystemProperties.get(CDMAPhone.PROPERTY_CDMA_HOME_OPERATOR_NUMERIC);
+            log("getOperatorNumberic - returning from NV: " + result);
+        } else {
+            IccRecords r = mIccRecords.get();
+            result = (r != null) ? r.getOperatorNumeric() : "";
+            log("getOperatorNumberic - returning from card: " + result);
+        }
+        if (result == null) result = "";
+        return result;
+    }
+
+    /**
+     * Based on the operator numeric, create a list for all possible
      * Data Connections and setup the preferredApn.
      */
     private void createAllApnList() {
         mAllApnSettings = new ArrayList<ApnSetting>();
-        IccRecords r = mIccRecords.get();
-        String homeOperator = "";
-        if (isNvSubscription()){
-            homeOperator = SystemProperties.get("ro.cdma.home.operator.numeric");
-        }
-        String operator = (r != null) ? r.getOperatorNumeric() : homeOperator;
+        String operator = getOperatorNumeric();
         if (operator != null) {
             String selection = "numeric = '" + operator + "'";
             // query only enabled apn.
@@ -2048,8 +2069,20 @@ public final class DcTracker extends DcTrackerBase {
             }
         }
 
+        int radioTech = ServiceState.RIL_RADIO_TECHNOLOGY_UNKNOWN;
+        int techFamily = UiccController.APP_FAM_UNKNOWN;
+        if (mAllApnSettings.isEmpty()) {
+            radioTech = mPhone.getServiceState().getRilDataRadioTechnology();
+            techFamily = UiccController.getFamilyFromRadioTechnology(radioTech);
+            if (techFamily == UiccController.APP_FAM_3GPP2) {
+                addDummyDataProfiles(operator);
+            }
+        }
+
         if (mAllApnSettings.isEmpty()) {
-            if (DBG) log("createAllApnList: No APN found for carrier: " + operator);
+            if (DBG) log("createAllApnList: No APN found for carrier: " + operator
+                    + " radioTech = " + String.valueOf(radioTech)
+                    + " Tech Family = " + String.valueOf(techFamily));
             mPreferredApn = null;
             // TODO: What is the right behavior?
             //notifyNoData(DataConnection.FailCause.MISSING_UNKNOWN_APN);
@@ -2064,6 +2097,38 @@ public final class DcTracker extends DcTrackerBase {
         if (DBG) log("createAllApnList: X mAllApnSettings=" + mAllApnSettings);
     }
 
+    private void addDummyDataProfiles(String operator) {
+        mAllApnSettings.addAll(createDummyDataProfiles(operator));
+    }
+
+    private ArrayList<ApnSetting> createDummyDataProfiles(String operator) {
+        // Create dummy data profiles.
+        if (DBG) log("createAllApnList: Creating dummy apn for cdma operator:" + operator);
+        String[] defaultApnTypes = {
+                PhoneConstants.APN_TYPE_DEFAULT,
+                PhoneConstants.APN_TYPE_MMS,
+                PhoneConstants.APN_TYPE_SUPL,
+                PhoneConstants.APN_TYPE_HIPRI,
+                PhoneConstants.APN_TYPE_FOTA,
+                PhoneConstants.APN_TYPE_IMS,
+                PhoneConstants.APN_TYPE_CBS};
+        String[] dunApnTypes = {
+                PhoneConstants.APN_TYPE_DUN};
+
+        ArrayList<ApnSetting> dummyApns = new ArrayList<ApnSetting>(2);
+        ApnSetting apn = new ApnSetting(DctConstants.APN_DEFAULT_ID, operator, null, null,
+                null, null, null, null, null, null, null,
+                RILConstants.SETUP_DATA_AUTH_PAP_CHAP, defaultApnTypes,
+                PROPERTY_CDMA_IPPROTOCOL, PROPERTY_CDMA_ROAMING_IPPROTOCOL, true, 0);
+        dummyApns.add(apn);
+        apn = new ApnSetting(DctConstants.APN_DUN_ID, operator, null, null,
+                null, null, null, null, null, null, null,
+                RILConstants.SETUP_DATA_AUTH_PAP_CHAP, dunApnTypes,
+                PROPERTY_CDMA_IPPROTOCOL, PROPERTY_CDMA_ROAMING_IPPROTOCOL, true, 0);
+        dummyApns.add(apn);
+        return dummyApns;
+    }
+
     /** Return the DC AsyncChannel for the new data connection */
     private DcAsyncChannel createDataConnection() {
         if (DBG) log("createDataConnection E");
@@ -2113,12 +2178,7 @@ public final class DcTracker extends DcTrackerBase {
             }
         }
 
-        IccRecords r = mIccRecords.get();
-        String homeOperator = "";
-        if (isNvSubscription()){
-            homeOperator = SystemProperties.get("ro.cdma.home.operator.numeric");
-        }
-        String operator = (r != null) ? r.getOperatorNumeric() : homeOperator;
+        String operator = getOperatorNumeric();
 
         // This is a workaround for a bug (7305641) where we don't failover to other
         // suitable APNs if our preferred APN fails.  On prepaid ATT sims we need to
@@ -2137,8 +2197,7 @@ public final class DcTracker extends DcTrackerBase {
             log("buildWaitingApns: usePreferred=" + usePreferred
                     + " canSetPreferApn=" + mCanSetPreferApn
                     + " mPreferredApn=" + mPreferredApn
-                    + " operator=" + operator + " radioTech=" + radioTech
-                    + " IccRecords r=" + r);
+                    + " operator=" + operator + " radioTech=" + radioTech);
         }
 
         if (usePreferred && mCanSetPreferApn && mPreferredApn != null &&
@@ -2163,7 +2222,7 @@ public final class DcTracker extends DcTrackerBase {
                 mPreferredApn = null;
             }
         }
-        if (mAllApnSettings != null) {
+        if (mAllApnSettings != null && !mAllApnSettings.isEmpty()) {
             if (DBG) log("buildWaitingApns: mAllApnSettings=" + mAllApnSettings);
             for (ApnSetting apn : mAllApnSettings) {
                 if (DBG) log("buildWaitingApns: apn=" + apn);
@@ -2187,6 +2246,11 @@ public final class DcTracker extends DcTrackerBase {
         } else {
             loge("mAllApnSettings is empty!");
         }
+
+        if (apnList.isEmpty()) {
+            apnList = createDummyDataProfiles(operator);
+        }
+
         if (DBG) log("buildWaitingApns: X apnList=" + apnList);
         return apnList;
     }
@@ -2229,7 +2293,7 @@ public final class DcTracker extends DcTrackerBase {
                 PREFERAPN_NO_UPDATE_URI, new String[] { "_id", "name", "apn" },
                 null, null, Telephony.Carriers.DEFAULT_SORT_ORDER);
 
-        if (cursor != null) {
+        if (cursor != null && cursor.getCount() > 0) {
             mCanSetPreferApn = true;
         } else {
             mCanSetPreferApn = false;
@@ -2237,7 +2301,7 @@ public final class DcTracker extends DcTrackerBase {
         log("getPreferredApn: mRequestedApnType=" + mRequestedApnType + " cursor=" + cursor
                 + " cursor.count=" + ((cursor != null) ? cursor.getCount() : 0));
 
-        if (mCanSetPreferApn && cursor.getCount() > 0) {
+        if (mCanSetPreferApn) {
             int pos;
             cursor.moveToFirst();
             pos = cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers._ID));
@@ -2360,6 +2424,20 @@ public final class DcTracker extends DcTrackerBase {
                 }
                 break;
 
+            case DctConstants.EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED: // fall thru
+            case DctConstants.EVENT_DATA_RAT_CHANGED:
+                // When data rat changes we might need to load different
+                // set of apns (example, LTE->1x)
+                if (onUpdateIcc()) {
+                    log("onUpdateIcc: tryRestartDataConnections " + Phone.REASON_NW_TYPE_CHANGED);
+                    tryRestartDataConnections(Phone.REASON_NW_TYPE_CHANGED);
+                } else if (isNvSubscription()){
+                    // If cdma subscription source changed to NV or data rat changed to cdma
+                    // (while subscription source was NV) - we need to trigger NV ready
+                    onNvReady();
+                }
+                break;
+
             default:
                 // handle the message in the super class DataConnectionTracker
                 super.handleMessage(msg);
@@ -2397,28 +2475,50 @@ public final class DcTracker extends DcTrackerBase {
         return cid;
     }
 
+    /**
+     * @description This function updates mIccRecords reference to track
+     *              currently used IccRecords
+     * @return true if IccRecords changed
+     */
     @Override
-    protected void onUpdateIcc() {
+    protected boolean onUpdateIcc() {
+        boolean result = false;
         if (mUiccController == null ) {
-            return;
+            loge("onUpdateIcc: mUiccController is null. Error!");
+            return false;
         }
 
-        IccRecords newIccRecords = mUiccController.getIccRecords(UiccController.APP_FAM_3GPP);
+        int dataRat = mPhone.getServiceState().getRilDataRadioTechnology();
+        int appFamily = UiccController.getFamilyFromRadioTechnology(dataRat);
+        IccRecords newIccRecords = mUiccController.getIccRecords(appFamily);
+        log("onUpdateIcc: newIccRecords " + ((newIccRecords != null) ?
+                newIccRecords.getClass().getName() : null));
+        if (dataRat == ServiceState.RIL_RADIO_TECHNOLOGY_UNKNOWN) {
+            // Ignore this. This could be due to data not registered
+            // We want to ignore RADIO_TECHNOLOGY_UNKNOWN so that we do not tear down data
+            // call in case we are out of service.
+            return false;
+        }
 
         IccRecords r = mIccRecords.get();
         if (r != newIccRecords) {
             if (r != null) {
-                log("Removing stale icc objects.");
+                log("Removing stale icc objects. " + ((r != null) ?
+                        r.getClass().getName() : null));
                 r.unregisterForRecordsLoaded(this);
                 mIccRecords.set(null);
             }
             if (newIccRecords != null) {
-                log("New records found");
+                log("New records found " + ((newIccRecords != null) ?
+                        newIccRecords.getClass().getName() : null));
                 mIccRecords.set(newIccRecords);
                 newIccRecords.registerForRecordsLoaded(
                         this, DctConstants.EVENT_RECORDS_LOADED, null);
             }
+            // Records changed -> return true
+            result = true;
         }
+        return result;
     }
 
     @Override
diff --git a/src/java/com/android/internal/telephony/gsm/GsmServiceStateTracker.java b/src/java/com/android/internal/telephony/gsm/GsmServiceStateTracker.java
index 3014838..355476f 100644
--- a/src/java/com/android/internal/telephony/gsm/GsmServiceStateTracker.java
+++ b/src/java/com/android/internal/telephony/gsm/GsmServiceStateTracker.java
@@ -1071,10 +1071,11 @@ final class GsmServiceStateTracker extends ServiceStateTracker {
             mPhone.notifyServiceStateChanged(mSS);
         }
 
-        if (hasGprsAttached) {
-            mAttachedRegistrants.notifyRegistrants();
-        }
-
+        // First notify detached, then rat changed, then attached - that's the way it
+        // happens in the modem.
+        // Behavior of recipients (DcTracker, for instance) depends on this sequence
+        // since DcTracker reloads profiles on "rat_changed" notification and sets up
+        // data call on "attached" notification.
         if (hasGprsDetached) {
             mDetachedRegistrants.notifyRegistrants();
         }
@@ -1084,6 +1085,11 @@ final class GsmServiceStateTracker extends ServiceStateTracker {
             mPhone.notifyDataConnection(null);
         }
 
+        if (hasGprsAttached) {
+            mAttachedRegistrants.notifyRegistrants();
+        }
+
+
         if (hasRoamingOn) {
             mRoamingOnRegistrants.notifyRegistrants();
         }
diff --git a/src/java/com/android/internal/telephony/dataconnection/DcTrackerBase.java b/src/java/com/android/internal/telephony/dataconnection/DcTrackerBase.java
index a8050a6..74e7dfb 100644
--- a/src/java/com/android/internal/telephony/dataconnection/DcTrackerBase.java
+++ b/src/java/com/android/internal/telephony/dataconnection/DcTrackerBase.java
@@ -698,7 +698,7 @@ public abstract class DcTrackerBase extends Handler {
     protected abstract void onCleanUpConnection(boolean tearDown, int apnId, String reason);
     protected abstract void onCleanUpAllConnections(String cause);
     public abstract boolean isDataPossible(String apnType);
-    protected abstract void onUpdateIcc();
+    protected abstract boolean onUpdateIcc();
     protected abstract void completeConnection(ApnContext apnContext);
 
     @Override
@@ -1877,3 +1877,4 @@ public abstract class DcTrackerBase extends Handler {
         pw.flush();
     }
 }
+

